# Importing the main Dash and Plotly Packages:
import dash_core_components as dcc
import dash_html_components as html
from dash.dependencies import Input, Output
import dash_bootstrap_components as dbc

from app import app

# Importing pdf parsing package and pdf database api:
from pdf_parsing_package import db_api, pdf_parser
# Importing Data Management Packages:
import pandas as pd

#test = db_api.pdf_db("/home/matthew/Documents/test_pdf_databases/test_db")
#test.pdf_to_db('/home/matthew/Documents/test_pdfs/ExxonMobil 2019 10-K Report.pdf', 'Exxon_10_K', '2019', 'XOM')
#test.pdf_to_db('/home/matthew/Documents/test_pdfs/TESLA 10-K Report 2019.pdf', 'Tesla_10_K', '2019','TSLA')


"""
# TODO: Write Divs and Callbacks that:
    -- Allows you to select a sqlite database by inputting a path string.

    -- Once a database has been selected automatically generate a visualization
    of the database via the Summary table.

    -- Create a means of selecting a table from the database based on the entries
    in the Summary table.

    -- Once a table is selected have the contents of the table visualized and have
    the options to manually add and remove data from the table.
"""

layout = html.Div(

    # Div tag that contains a title and a table of data extracted from the Summary db table:
    html.Div(id='db_summary_table_format')
)

# Callback that creates and returns the database Summary table using the db_api package:
@app.callback(
    Output(component_id='db_summary_table_format', component_property='children'),
    [Input(component_id='database_path_string', component_property='value')])
# Method that builds the database summary table:
def build_summary_table(path):
    '''
    The method queries data from the database's Summary table using the db_api
    package and builds said data into a Table, formatted by bootstrap, using the
    dbc.Table.from_dataframe() mehtod.

    Parameters
    ----------
    path : str
        This is a string representing a path to the database file on a the local
        machine. It is generated by a dcc.Input object in the app's main page.

    Returns
    -------
    summary_table : html.Div object
        A Div tag containing both the title for the summary table and the table
        object generated from the extracted dataframe. This is generated
        via the dbc.Table.from_dataframe() method.
    '''
    try:
        # Creating an instance of the database api:
        db = db_api.pdf_db(path)

        # Extracting the summary table as a dataframe:
        summary_df = db.get_table_data('Summary').reset_index()

        # Creating the title for the summary table:
        summary_table_title = html.A(
            "PDF Database MetaData",
            style = {'display':'inline-block'}
            )

        # Creating Table object:
        summary_table = dbc.Table.from_dataframe(
            # Dataframe:
            summary_df,
            # Formatting:
            bordered = True,
            #dark = True,
            hover = True,
            striped = True
            )

        # Creating Div containing object allowing database interaction:
        db_interact_div = html.Div(
            id = 'db_interaction_bar',
            children = [
                dcc.Input(id = 'table_query', type='text',
                    placeholder='Search Table', debounce = True),

                dbc.Button('View' ,id ='table_view_btn', color ='primary',
                    style = {'margin-left':'1.5em'}),

                dbc.Button('Delete',id ='table_delet_btn', color ='danger',
                    style = {'margin-left':'1.5em'}),

                html.Div(id='pdf_table', children = [html.H1('BIG TEST')])
                ],
            style = {'width':'50%'}
            )

        # Adding all Summary Values to a Div for Formatting:
        summary_table_div = html.Div(
            id = 'summary_table_div',
            children = [summary_table_title, summary_table],
            style = {'display':'inline-block', 'width':'50%'}
        )

        # Combining all Div tags together into a main div for formatting:
        main_div = html.Div(
            id = 'main_div',
            children = [summary_table_div, db_interact_div]
            )

        return main_div

    except:
        return None
